import { z } from 'zod';

export const ProblemDetailsSchema = z
  .object({
    type: z
      .url()
      .optional()
      .meta({ description: 'A URI identifying the problem type.' })
      .describe('A URI identifying the problem type.'),
    title: z
      .string()
      .meta({ description: 'Short, human-readable summary of the problem type.' })
      .describe('Short summary of the problem type.'),
    status: z
      .number()
      .int()
      .meta({
        description: 'HTTP status code generated by the origin server.',
      })
      .describe('HTTP status code.'),
    detail: z
      .string()
      .optional()
      .meta({ description: 'Human-readable explanation specific to this occurrence.' })
      .describe('Human-readable explanation.'),
    instance: z
      .string()
      .optional()
      .meta({ description: 'A URI reference identifying this occurrence.' })
      .describe('Occurrence identifier URI.'),
    traceId: z
      .string()
      .optional()
      .meta({ description: 'Trace identifier for correlation.' })
      .describe('Trace identifier.'),
    code: z
      .string()
      .optional()
      .meta({ description: 'Stable, implementation-specific error code.' })
      .describe('Stable error code.'),
    errors: z
      .record(z.string(), z.array(z.string()))
      .optional()
      .meta({ description: 'Per-field validation errors.' })
      .describe('Field-level validation errors.'),
  })
  .strict()
  .catchall(z.unknown())
  .meta({
    description: 'RFC 9457 Problem Details object. Use application/problem+json as Content-Type.',
  })
  .describe('RFC 9457 Problem Details object.')
  .brand<'ProblemDetailsSchema'>();

export type ProblemDetails = z.infer<typeof ProblemDetailsSchema>;
export type ProblemDetailsInput = z.input<typeof ProblemDetailsSchema>;
